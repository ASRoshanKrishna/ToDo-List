(()=>{"use strict";var e={208:(e,t,n)=>{n.d(t,{A:()=>A});var r=n(354),o=n.n(r),a=n(314),i=n.n(a),s=n(417),c=n.n(s),d=new URL(n(991),n.b),l=i()(o()),u=c()(d);l.push([e.id,`@font-face {\n    font-family: 'MyFont';\n    src: url(${u});\n}\n\n*{\n    margin: 0;\n    font-family: 'MyFont','Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n}\n\nbody{\n    display: grid;\n    grid-template-rows: 1fr 5fr;\n    width: 100%;\n    height: 100vh;\n}\n\nheader{\n    grid-row: 1;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #34d399;\n    color: white;\n    font-size: xx-large;\n}\n\ndialog{\n    margin: auto;\n    border-radius: 12px;\n}\n\ninput{\n    font-size: 20px;\n}\n\n#detailDialog,\n#editDialog,\n#addDialog{\n    font-size: 26px;\n    font-weight: 500;\n    padding-top: 0;\n    padding-right: 0;\n    min-width: 35rem;\n    overflow: fit-content;\n    border: none;\n    box-shadow: 11px 11px 64px -15px rgba(52,211,153,1);\n}\n\n#detailDialog h2,\n#addDialog h2{\n    font-size: 45px;\n    margin-top: -2rem;\n    margin-bottom: 1rem;\n}\n\n#addDialog h2{\n    margin-top: -1rem;\n}\n\n#editDialog h2{\n    margin-bottom: 1em;\n}\n\n#detailDialog p,\n#editDialog div,\n#addDialog div{\n    margin-bottom: 0.5em;\n}\n\n#detailDialog div{\n    margin-bottom: 20px;\n}\n\nb{\n    color: #10b981;\n}\n\n.newbtn,\n.detailbtn,\n.editbtn{\n    display: flex;\n    justify-content: right;\n}\n\n#description,\n#editdescription{\n    vertical-align: top;\n    font-size: 20px;\n}\n\n::backdrop{\n    background-color: rgba(197, 205, 216, 0.6);\n}\n\n.content{\n    grid-row: 2;\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n}\n\n.sidebar{\n    grid-column: 1;\n    background-color: #8b5cf6;\n}\n\n.sidebar h2{\n    margin: 1rem;\n    margin-left: 2rem;\n    font-size: 30px;\n}\n\n.sidebar ul{\n    font-size: 30px; \n    font-weight: 500;\n    list-style: none;\n}\n\n.sidebar ul li{\n    margin-right: 1rem;\n    margin-bottom: 1rem;\n    display: flex;\n    justify-content: space-between;\n}\n \n.btn1{\n    font-size: 21px;\n    background-color: transparent;\n    outline: none;\n    border: none;\n    color: #34d399;\n    display: none;\n}\n\n.sidebar ul span:hover{\n    cursor: pointer;\n}\n\n.sidebar ul li:hover{\n    color: #34d399;\n}\n\n.sidebar ul li:hover .btn1, .btn1:hover{\n    display: inline-block;\n    cursor: pointer;\n}\n\n#addnew{\n    position: absolute;\n    bottom: 3rem;\n    left: 3rem;\n    width: 4rem;\n    height: 4rem;\n    border-radius: 50%;\n    border: none;\n    outline: none;\n    background-color: #34d399;\n    box-shadow: 10px 10px 5px -6px rgba(0,0,0,0.26);\n}\n\n#addnew:hover{\n    background-color: #f9fafb;\n    color: #34d399;\n    cursor: pointer;\n}\n\n#addnew i{\n    font-size: 2em;\n}\n\n.listitems{\n    grid-column: 2;\n    grid-template-rows: 1fr 4fr;\n    background-color: #f8fafc;\n}\n\n.todotitle{\n    grid-row: 1;\n    padding-top: 1rem;\n    padding-left: 1rem;\n    font-size: 23px;\n}\n\n.todonames{\n    grid-row: 2;\n}\n\n.card{\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    background-color: #e5e7eb;\n    font-size: 23px;\n    min-width: 36rem;\n    height: 4.5rem;\n    margin: 1rem;\n    font-weight: bold;\n    border-radius: 5px;\n    box-shadow: 10px 11px 5px -10px rgba(52,211,153,1);\n}\n\ninput[type='checkbox'] {\n    width: 20px;\n    height: 20px;\n    accent-color: #34d399;\n    cursor: pointer;\n}\n\ninput[type='radio'] {\n    box-sizing: border-box;\n    appearance: none;\n    background: white;\n    outline: 2px solid #333;\n    border: 3px solid white;\n    width: 16px;\n    height: 16px;\n    cursor: pointer;\n}\n  \ninput[type='radio']:checked {\n    background: #34d399;\n}\n\n.card:hover{\n    box-shadow: 11px 11px 5px -7px rgba(52,211,153,1);\n}\n\n.card *{\n    margin: 8px;\n}\n\n.line{\n    text-decoration: line-through;\n    opacity: 0.3;\n    color: #64748b;\n}\n\n.high{\n    border-left: 13px solid #dc2626;\n}\n\n.medium{\n    border-left: 13px solid #fde047;\n}\n\n.low{\n    border-left: 13px solid #22c55e;\n}\n\n.details,\n#editAdder,\n#adder{\n    border: 2px solid #34d399;\n    font-size: 18px;\n    background-color: transparent;\n    border-radius: 5px;\n}\n\n.details:hover,\n#editAdder:hover,\n#adder:hover{\n    background-color: #34d399;\n    color: white;\n    cursor: pointer;\n}\n\n.btn,\n#detailClose,\n#editClose,\n#close{\n    font-size: 23px;\n    background-color: transparent;\n    outline: none;\n    border: none;\n}\n\n.btn:hover,\n#detailClose:hover,\n#editClose:hover,\n#close:hover{\n    color: #34d399;\n    cursor: pointer;\n}`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["@font-face {\n    font-family: 'MyFont';\n    src: url('./my-font.otf');\n}\n\n*{\n    margin: 0;\n    font-family: 'MyFont','Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n}\n\nbody{\n    display: grid;\n    grid-template-rows: 1fr 5fr;\n    width: 100%;\n    height: 100vh;\n}\n\nheader{\n    grid-row: 1;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #34d399;\n    color: white;\n    font-size: xx-large;\n}\n\ndialog{\n    margin: auto;\n    border-radius: 12px;\n}\n\ninput{\n    font-size: 20px;\n}\n\n#detailDialog,\n#editDialog,\n#addDialog{\n    font-size: 26px;\n    font-weight: 500;\n    padding-top: 0;\n    padding-right: 0;\n    min-width: 35rem;\n    overflow: fit-content;\n    border: none;\n    box-shadow: 11px 11px 64px -15px rgba(52,211,153,1);\n}\n\n#detailDialog h2,\n#addDialog h2{\n    font-size: 45px;\n    margin-top: -2rem;\n    margin-bottom: 1rem;\n}\n\n#addDialog h2{\n    margin-top: -1rem;\n}\n\n#editDialog h2{\n    margin-bottom: 1em;\n}\n\n#detailDialog p,\n#editDialog div,\n#addDialog div{\n    margin-bottom: 0.5em;\n}\n\n#detailDialog div{\n    margin-bottom: 20px;\n}\n\nb{\n    color: #10b981;\n}\n\n.newbtn,\n.detailbtn,\n.editbtn{\n    display: flex;\n    justify-content: right;\n}\n\n#description,\n#editdescription{\n    vertical-align: top;\n    font-size: 20px;\n}\n\n::backdrop{\n    background-color: rgba(197, 205, 216, 0.6);\n}\n\n.content{\n    grid-row: 2;\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n}\n\n.sidebar{\n    grid-column: 1;\n    background-color: #8b5cf6;\n}\n\n.sidebar h2{\n    margin: 1rem;\n    margin-left: 2rem;\n    font-size: 30px;\n}\n\n.sidebar ul{\n    font-size: 30px; \n    font-weight: 500;\n    list-style: none;\n}\n\n.sidebar ul li{\n    margin-right: 1rem;\n    margin-bottom: 1rem;\n    display: flex;\n    justify-content: space-between;\n}\n \n.btn1{\n    font-size: 21px;\n    background-color: transparent;\n    outline: none;\n    border: none;\n    color: #34d399;\n    display: none;\n}\n\n.sidebar ul span:hover{\n    cursor: pointer;\n}\n\n.sidebar ul li:hover{\n    color: #34d399;\n}\n\n.sidebar ul li:hover .btn1, .btn1:hover{\n    display: inline-block;\n    cursor: pointer;\n}\n\n#addnew{\n    position: absolute;\n    bottom: 3rem;\n    left: 3rem;\n    width: 4rem;\n    height: 4rem;\n    border-radius: 50%;\n    border: none;\n    outline: none;\n    background-color: #34d399;\n    box-shadow: 10px 10px 5px -6px rgba(0,0,0,0.26);\n}\n\n#addnew:hover{\n    background-color: #f9fafb;\n    color: #34d399;\n    cursor: pointer;\n}\n\n#addnew i{\n    font-size: 2em;\n}\n\n.listitems{\n    grid-column: 2;\n    grid-template-rows: 1fr 4fr;\n    background-color: #f8fafc;\n}\n\n.todotitle{\n    grid-row: 1;\n    padding-top: 1rem;\n    padding-left: 1rem;\n    font-size: 23px;\n}\n\n.todonames{\n    grid-row: 2;\n}\n\n.card{\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    background-color: #e5e7eb;\n    font-size: 23px;\n    min-width: 36rem;\n    height: 4.5rem;\n    margin: 1rem;\n    font-weight: bold;\n    border-radius: 5px;\n    box-shadow: 10px 11px 5px -10px rgba(52,211,153,1);\n}\n\ninput[type='checkbox'] {\n    width: 20px;\n    height: 20px;\n    accent-color: #34d399;\n    cursor: pointer;\n}\n\ninput[type='radio'] {\n    box-sizing: border-box;\n    appearance: none;\n    background: white;\n    outline: 2px solid #333;\n    border: 3px solid white;\n    width: 16px;\n    height: 16px;\n    cursor: pointer;\n}\n  \ninput[type='radio']:checked {\n    background: #34d399;\n}\n\n.card:hover{\n    box-shadow: 11px 11px 5px -7px rgba(52,211,153,1);\n}\n\n.card *{\n    margin: 8px;\n}\n\n.line{\n    text-decoration: line-through;\n    opacity: 0.3;\n    color: #64748b;\n}\n\n.high{\n    border-left: 13px solid #dc2626;\n}\n\n.medium{\n    border-left: 13px solid #fde047;\n}\n\n.low{\n    border-left: 13px solid #22c55e;\n}\n\n.details,\n#editAdder,\n#adder{\n    border: 2px solid #34d399;\n    font-size: 18px;\n    background-color: transparent;\n    border-radius: 5px;\n}\n\n.details:hover,\n#editAdder:hover,\n#adder:hover{\n    background-color: #34d399;\n    color: white;\n    cursor: pointer;\n}\n\n.btn,\n#detailClose,\n#editClose,\n#close{\n    font-size: 23px;\n    background-color: transparent;\n    outline: none;\n    border: none;\n}\n\n.btn:hover,\n#detailClose:hover,\n#editClose:hover,\n#close:hover{\n    color: #34d399;\n    cursor: pointer;\n}"],sourceRoot:""}]);const A=l},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},417:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],s=0;s<e.length;s++){var c=e[s],d=r.base?c[0]+r.base:c[0],l=a[d]||0,u="".concat(d," ").concat(l);a[d]=l+1;var A=n(u),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)t[A].references++,t[A].updater(h);else{var g=o(h,r);r.byIndex=s,t.splice(s,0,{identifier:u,updater:g,references:1})}i.push(u)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=n(a[i]);t[s].references--}for(var c=r(e,o),d=0;d<a.length;d++){var l=n(a[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=c}}},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},991:(e,t,n)=>{e.exports=n.p+"6a757eab86c62e2318be.otf"}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&(!e||!/^http(s?):/.test(e));)e=r[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0;var r=n(72),o=n.n(r),a=n(825),i=n.n(a),s=n(659),c=n.n(s),d=n(56),l=n.n(d),u=n(540),A=n.n(u),h=n(113),g=n.n(h),m=n(208),f={};f.styleTagTransform=g(),f.setAttributes=l(),f.insert=c().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=A(),o()(m.A,f),m.A&&m.A.locals&&m.A.locals;const p={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function b(e){return(t={})=>{const n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}const y={date:b({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:b({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:b({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},w={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function v(e){return(t,n)=>{let r;if("formatting"===(n?.context?String(n.context):"standalone")&&e.formattingValues){const t=e.defaultFormattingWidth||e.defaultWidth,o=n?.width?String(n.width):t;r=e.formattingValues[o]||e.formattingValues[t]}else{const t=e.defaultWidth,o=n?.width?String(n.width):e.defaultWidth;r=e.values[o]||e.values[t]}return r[e.argumentCallback?e.argumentCallback(t):t]}}const C={ordinalNumber:(e,t)=>{const n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:v({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:v({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:e=>e-1}),month:v({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:v({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:v({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function B(e){return(t,n={})=>{const r=n.width,o=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],a=t.match(o);if(!a)return null;const i=a[0],s=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(s)?function(e,t){for(let t=0;t<e.length;t++)if(e[t].test(i))return t}(s):function(e,t){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t)&&e[t].test(i))return t}(s);let d;return d=e.valueCallback?e.valueCallback(c):c,d=n.valueCallback?n.valueCallback(d):d,{value:d,rest:t.slice(i.length)}}}const I={ordinalNumber:(x={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:e=>parseInt(e,10)},(e,t={})=>{const n=e.match(x.matchPattern);if(!n)return null;const r=n[0],o=e.match(x.parsePattern);if(!o)return null;let a=x.valueCallback?x.valueCallback(o[0]):o[0];return a=t.valueCallback?t.valueCallback(a):a,{value:a,rest:e.slice(r.length)}}),era:B({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:B({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:e=>e+1}),month:B({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:B({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:B({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};var x;const k={code:"en-US",formatDistance:(e,t,n)=>{let r;const o=p[e];return r="string"==typeof o?o:1===t?o.one:o.other.replace("{{count}}",t.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:y,formatRelative:(e,t,n,r)=>w[e],localize:C,match:I,options:{weekStartsOn:0,firstWeekContainsDate:1}};let P={};function E(){return P}Math.pow(10,8);const S=6048e5,j=864e5;function D(e){const t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new e.constructor(+e):"number"==typeof e||"[object Number]"===t||"string"==typeof e||"[object String]"===t?new Date(e):new Date(NaN)}function M(e){const t=D(e);return t.setHours(0,0,0,0),t}function T(e){const t=D(e),n=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return n.setUTCFullYear(t.getFullYear()),+e-+n}function W(e,t){return e instanceof Date?new e.constructor(t):new Date(t)}function Y(e){const t=D(e);return function(e,t){const n=M(e),r=M(t),o=+n-T(n),a=+r-T(r);return Math.round((o-a)/j)}(t,function(e){const t=D(e),n=W(e,0);return n.setFullYear(t.getFullYear(),0,1),n.setHours(0,0,0,0),n}(t))+1}function q(e,t){const n=E(),r=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,o=D(e),a=o.getDay(),i=(a<r?7:0)+a-r;return o.setDate(o.getDate()-i),o.setHours(0,0,0,0),o}function L(e){return q(e,{weekStartsOn:1})}function z(e){const t=D(e),n=t.getFullYear(),r=W(e,0);r.setFullYear(n+1,0,4),r.setHours(0,0,0,0);const o=L(r),a=W(e,0);a.setFullYear(n,0,4),a.setHours(0,0,0,0);const i=L(a);return t.getTime()>=o.getTime()?n+1:t.getTime()>=i.getTime()?n:n-1}function O(e){const t=D(e),n=+L(t)-+function(e){const t=z(e),n=W(e,0);return n.setFullYear(t,0,4),n.setHours(0,0,0,0),L(n)}(t);return Math.round(n/S)+1}function N(e,t){const n=D(e),r=n.getFullYear(),o=E(),a=t?.firstWeekContainsDate??t?.locale?.options?.firstWeekContainsDate??o.firstWeekContainsDate??o.locale?.options?.firstWeekContainsDate??1,i=W(e,0);i.setFullYear(r+1,0,a),i.setHours(0,0,0,0);const s=q(i,t),c=W(e,0);c.setFullYear(r,0,a),c.setHours(0,0,0,0);const d=q(c,t);return n.getTime()>=s.getTime()?r+1:n.getTime()>=d.getTime()?r:r-1}function $(e,t){const n=D(e),r=+q(n,t)-+function(e,t){const n=E(),r=t?.firstWeekContainsDate??t?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,o=N(e,t),a=W(e,0);return a.setFullYear(o,0,r),a.setHours(0,0,0,0),q(a,t)}(n,t);return Math.round(r/S)+1}function H(e,t){return(e<0?"-":"")+Math.abs(e).toString().padStart(t,"0")}const F={y(e,t){const n=e.getFullYear(),r=n>0?n:1-n;return H("yy"===t?r%100:r,t.length)},M(e,t){const n=e.getMonth();return"M"===t?String(n+1):H(n+1,2)},d:(e,t)=>H(e.getDate(),t.length),a(e,t){const n=e.getHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(e,t)=>H(e.getHours()%12||12,t.length),H:(e,t)=>H(e.getHours(),t.length),m:(e,t)=>H(e.getMinutes(),t.length),s:(e,t)=>H(e.getSeconds(),t.length),S(e,t){const n=t.length,r=e.getMilliseconds();return H(Math.trunc(r*Math.pow(10,n-3)),t.length)}},G={G:function(e,t,n){const r=e.getFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){const t=e.getFullYear(),r=t>0?t:1-t;return n.ordinalNumber(r,{unit:"year"})}return F.y(e,t)},Y:function(e,t,n,r){const o=N(e,r),a=o>0?o:1-o;return"YY"===t?H(a%100,2):"Yo"===t?n.ordinalNumber(a,{unit:"year"}):H(a,t.length)},R:function(e,t){return H(z(e),t.length)},u:function(e,t){return H(e.getFullYear(),t.length)},Q:function(e,t,n){const r=Math.ceil((e.getMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return H(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){const r=Math.ceil((e.getMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return H(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){const r=e.getMonth();switch(t){case"M":case"MM":return F.M(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){const r=e.getMonth();switch(t){case"L":return String(r+1);case"LL":return H(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){const o=$(e,r);return"wo"===t?n.ordinalNumber(o,{unit:"week"}):H(o,t.length)},I:function(e,t,n){const r=O(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):H(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getDate(),{unit:"date"}):F.d(e,t)},D:function(e,t,n){const r=Y(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):H(r,t.length)},E:function(e,t,n){const r=e.getDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){const o=e.getDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(a);case"ee":return H(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){const o=e.getDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(a);case"cc":return H(a,t.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(e,t,n){const r=e.getDay(),o=0===r?7:r;switch(t){case"i":return String(o);case"ii":return H(o,t.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){const r=e.getHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){const r=e.getHours();let o;switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(e,t,n){const r=e.getHours();let o;switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){let t=e.getHours()%12;return 0===t&&(t=12),n.ordinalNumber(t,{unit:"hour"})}return F.h(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getHours(),{unit:"hour"}):F.H(e,t)},K:function(e,t,n){const r=e.getHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):H(r,t.length)},k:function(e,t,n){let r=e.getHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):H(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getMinutes(),{unit:"minute"}):F.m(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getSeconds(),{unit:"second"}):F.s(e,t)},S:function(e,t){return F.S(e,t)},X:function(e,t,n){const r=e.getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return X(r);case"XXXX":case"XX":return J(r);default:return J(r,":")}},x:function(e,t,n){const r=e.getTimezoneOffset();switch(t){case"x":return X(r);case"xxxx":case"xx":return J(r);default:return J(r,":")}},O:function(e,t,n){const r=e.getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+U(r,":");default:return"GMT"+J(r,":")}},z:function(e,t,n){const r=e.getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+U(r,":");default:return"GMT"+J(r,":")}},t:function(e,t,n){return H(Math.trunc(e.getTime()/1e3),t.length)},T:function(e,t,n){return H(e.getTime(),t.length)}};function U(e,t=""){const n=e>0?"-":"+",r=Math.abs(e),o=Math.trunc(r/60),a=r%60;return 0===a?n+String(o):n+String(o)+t+H(a,2)}function X(e,t){return e%60==0?(e>0?"-":"+")+H(Math.abs(e)/60,2):J(e,t)}function J(e,t=""){const n=e>0?"-":"+",r=Math.abs(e);return n+H(Math.trunc(r/60),2)+t+H(r%60,2)}const Q=(e,t)=>{switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},Z=(e,t)=>{switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},R={p:Z,P:(e,t)=>{const n=e.match(/(P+)(p+)?/)||[],r=n[1],o=n[2];if(!o)return Q(e,t);let a;switch(r){case"P":a=t.dateTime({width:"short"});break;case"PP":a=t.dateTime({width:"medium"});break;case"PPP":a=t.dateTime({width:"long"});break;default:a=t.dateTime({width:"full"})}return a.replace("{{date}}",Q(r,t)).replace("{{time}}",Z(o,t))}},V=/^D+$/,_=/^Y+$/,K=["D","DD","YY","YYYY"];function ee(e){if(!(t=e,t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)||"number"==typeof e))return!1;var t;const n=D(e);return!isNaN(Number(n))}const te=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ne=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,re=/^'([^]*?)'?$/,oe=/''/g,ae=/[a-zA-Z]/;function ie(e,t,n){const r=E(),o=n?.locale??r.locale??k,a=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,i=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,s=D(e);if(!ee(s))throw new RangeError("Invalid time value");let c=t.match(ne).map((e=>{const t=e[0];return"p"===t||"P"===t?(0,R[t])(e,o.formatLong):e})).join("").match(te).map((e=>{if("''"===e)return{isToken:!1,value:"'"};const t=e[0];if("'"===t)return{isToken:!1,value:se(e)};if(G[t])return{isToken:!0,value:e};if(t.match(ae))throw new RangeError("Format string contains an unescaped latin alphabet character `"+t+"`");return{isToken:!1,value:e}}));o.localize.preprocessor&&(c=o.localize.preprocessor(s,c));const d={firstWeekContainsDate:a,weekStartsOn:i,locale:o};return c.map((r=>{if(!r.isToken)return r.value;const a=r.value;return(!n?.useAdditionalWeekYearTokens&&function(e){return _.test(e)}(a)||!n?.useAdditionalDayOfYearTokens&&function(e){return V.test(e)}(a))&&function(e,t,n){const r=function(e,t,n){const r="Y"===e[0]?"years":"days of the month";return`Use \`${e.toLowerCase()}\` instead of \`${e}\` (in \`${t}\`) for formatting ${r} to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(e,t,n);if(console.warn(r),K.includes(e))throw new RangeError(r)}(a,t,String(e)),(0,G[a[0]])(s,a,o.localize,d)})).join("")}function se(e){const t=e.match(re);return t?t[1].replace(oe,"'"):e}const ce={events:{},Subscribe(e,t){console.log(`PUBSUB: someone just subscribed to know about ${e}`),this.events[e]=this.events[e]||[],this.events[e].push(t)},Unsubscribe(e,t){console.log(`PUBSUB: someone just UNsubscribed from ${e}`),this.events[e]&&(this.events[e]=this.events[e].filter((e=>e!==t)))},Publish(e,t){console.log(`PUBSUB: Making an broadcast about ${e} with ${t}`),this.events[e]&&this.events[e].forEach((e=>{e(t)}))}},de=document.querySelector("#fo"),le=document.querySelector("#adder"),ue=document.querySelector("#addDialog"),Ae=document.querySelector("#addnew"),he=document.querySelector("#close"),ge=document.querySelector(".todonames"),me=document.querySelector(".projectlist");le.addEventListener("click",(()=>{Ce()})),Ae.addEventListener("click",(()=>{ue.showModal()})),he.addEventListener("click",(()=>{event.preventDefault(),de.reset(),ue.close()}));const fe=document.querySelector("#detailDialog"),pe=document.querySelector(".detailDiv");document.querySelector("#detailClose").addEventListener("click",(()=>{event.preventDefault(),fe.close()}));const be=document.querySelector("#editDialog"),ye=document.querySelector(".editDiv"),we=document.querySelector("#editAdder"),ve=document.querySelector("#editClose");function Ce(){let e=[];const t=document.getElementById("projectname"),n=document.getElementById("title"),r=document.getElementById("description"),o=document.getElementById("duedate"),a=document.getElementById("one").checked,i=document.getElementById("two").checked,s=document.getElementById("three").checked;let c;a?c="High":i?c="Medium":s&&(c="Low");const d=ie(new Date,"yyyy-MM-dd"),l=o.value>=d;if(t.value&&n.value&&r.value&&o.value&&c){if(0==l)return alert("You cannot create a ToDo for the past!!"),o.value="",void Ce();e=[t.value,n.value,r.value,o.value,!1,c],ce.Publish("creatingTodos",e),event.preventDefault(),de.reset(),ue.close()}ce.Publish("settingLocal",n)}function Be(e,t){const n=[e,t];ce.Publish("removingTodos",n)}function Ie(e,t){const n=[e,t];ce.Publish("gettingEdits",n)}we.addEventListener("click",(()=>{!function(){let e=[];const t=document.getElementById("editprojectname"),n=document.getElementById("edittitle"),r=document.getElementById("editdescription"),o=document.getElementById("editduedate"),a=document.getElementById("editone").checked,i=document.getElementById("edittwo").checked,s=document.getElementById("editthree").checked;let c;a?c="High":i?c="Medium":s&&(c="Low");const d=ie(new Date,"yyyy-MM-dd"),l=o.value>=d;t.value&&n.value&&r.value&&o.value&&c&&(0==l?(alert("You cannot create a ToDo for the past!!"),event.preventDefault()):(e=[t.className,n.className,t.value,n.value,r.value,o.value,!1,c],console.log(e),ce.Publish("editingTodos",e),event.preventDefault(),be.close()))}()})),ve.addEventListener("click",(()=>{event.preventDefault(),be.close()})),ge.addEventListener("click",(function(e){e.target&&e.target.classList.contains("rmv")&&Be(e.target.id,e.target.value)})),ge.addEventListener("click",(function(e){e.target&&"rmv"==e.target.id&&Be(e.target.parentNode.id,e.target.parentNode.value)})),ge.addEventListener("click",(function(e){e.target&&"edit"==e.target.id&&Ie(e.target.parentNode.id,e.target.parentNode.value)})),ge.addEventListener("change",(function(e){e.target&&e.target.classList.contains("check")&&function(e,t){const n=[e,t];ce.Publish("changingStatus",n)}(e.target.id,e.target.value)})),ge.addEventListener("click",(function(e){e.target&&e.target.classList.contains("details")&&function(e,t){const n=[e,t];ce.Publish("gettingDetails",n)}(e.target.id,e.target.value)})),ge.addEventListener("click",(function(e){e.target&&e.target.classList.contains("edit")&&Ie(e.target.id,e.target.value)})),me.addEventListener("click",(function(e){e.target&&e.target.classList.contains("projectli")&&ce.Publish("callPrintTodos",e.target.id)})),me.addEventListener("click",(function(e){e.target&&"rmvp"==e.target.id&&ce.Publish("removingProjects",e.target.parentNode.id)})),ce.Subscribe("printingTodos",(function(e){let t=e.project,n=e.title,r=ie(e.dueDate,"MMM-do");console.log(r),console.log(n);let o="unchecked";const a=document.createElement("div");a.classList.add("card"),1==e.progress&&(o="checked",a.classList.add("line")),"High"==e.priority&&a.classList.add("high"),"Medium"==e.priority?a.classList.add("medium"):"Low"==e.priority&&a.classList.add("low");let i=`<div>\n                <input class="check" id="${t}" value="${n}" type="checkbox" ${o}>\n                ${e.title}\n                </div>\n                <div>\n                ${r}\n                <button class="edit btn" id="${t}" value="${n}"><i id="edit" class="fa fa-edit"></i></button>\n                <button class="rmv btn" id="${t}" value="${n}" type="button"><i id="rmv" class="fa fa-trash"></i></button>\n                <button class="details" id="${t}" value="${n}">Details</button>\n                </div>`;a.innerHTML=i,ge.appendChild(a)})),ce.Subscribe("printingProjects",(function(e){const t=document.createElement("li");t.classList.add(`${e}`),t.innerHTML=`<span id="${e}" class="projectli">${e}</span> <button class="rmv btn1" id="${e}" type="button"><i id="rmvp" class="fa fa-trash"></i></button>`,me.append(t)})),ce.Subscribe("cleaningDOM",(function(e){for(console.log(e);e.firstChild;)console.log(`${e} is deleting`),e.removeChild(e.firstChild)})),ce.Subscribe("sendingDetails",(function(e){let t=`<h2>${e[1]}</h2>\n                        <p><b>Project:</b>  ${e[0]}</p>\n                        <p><b>Description:</b>  ${e[2]}</p>\n                        <p><b>DueDate:</b>  ${e[3]}</p>\n                        <p><b>Priority:</b>  ${e[4]}</p>`;pe.innerHTML=t,fe.showModal(),console.log(e)})),ce.Subscribe("sendingEdits",(function(e){console.log(e);let t=`<h2>Editing the ToDo</h2>\n                    <div class="input1">\n                    <label for="projectname"><b>Project: </b></label>\n                    <input type="text" class="${e[0]}" id="editprojectname" value="${e[0]}" readonly>\n                    </div>\n                    <div class="input2">\n                    <label for="title"><b>Title: </b></label>\n                    <input type="text" class="${e[1]}" id="edittitle" value="${e[1]}" required>\n                    </div>\n                    <div class="input3">\n                    <label for="description"><b>Description: </b></label>\n                    <textarea id="editdescription" name="Text1" rows="4" cols="30" required>${e[2]}</textarea>\n                    </div>\n                    <div class="input4">\n                    <label for="duedate"><b>Due Date: </b></label>\n                    <input type="date" id="editduedate" value="${e[3]}" required>\n                    </div>\n                    <div class="input5">\n                    <label><b>Priority: </b></label>\n                    <label for="editone">High</label>\n                    <input type="radio" id="editone" name="Priority" required>\n                    <label for="edittwo"> Medium</label>\n                    <input type="radio" id="edittwo" name="Priority" required>\n                    <label for="editthree"> Low</label>\n                    <input type="radio" id="editthree" name="Priority" required>\n                    </div>`;ye.innerHTML=t,be.showModal()}));const xe=document.querySelector(".todonames"),ke=document.querySelector(".projectlist"),Pe={allProjects:{},createProject(e){const t=e[0],n=e[1];console.log(`creating a project ${t} with todo ${n.title}`),Pe.allProjects[t]=Pe.allProjects[t]||[],Pe.allProjects[t].push(n),console.log(Pe.allProjects),Pe.printTodos(t)},removeTodo(e){const t=e[0],n=e[1];console.log(`removing todo ${n} from project ${t}`),Pe.allProjects[t]&&(Pe.allProjects[t]=Pe.allProjects[t].filter((e=>e.title!=n))),Pe.printTodos(t),console.log(Pe.allProjects),Pe.changeallProjects()},removeProject(e){let t="";Object.keys(Pe.allProjects).forEach((n=>{console.log(t),n==e&&(delete Pe.allProjects[n],Pe.changeallProjects(),""==t?Pe.newPopulate():Pe.printTodos(t)),t=n}))},changeStatus(e){const t=e[0],n=e[1];console.log(`changing progress of ${n} from project ${t}`),Pe.allProjects[t].forEach((e=>{e.title==n&&(console.log(e.title,e.progress),e.progress=!e.progress,console.log(e.title,e.progress),event.preventDefault())})),event.preventDefault(),Pe.printTodos(t),console.log(Pe.allProjects),Pe.changeallProjects()},getDetails(e){const t=e[0],n=e[1];Pe.allProjects[t].forEach((e=>{if(e.title!=n);else{const t=[e.project,e.title,e.description,e.dueDate,e.priority];ce.Publish("sendingDetails",t)}}))},getEdits(e){const t=e[0],n=e[1];Pe.allProjects[t].forEach((e=>{if(e.title!=n);else{const t=[e.project,e.title,e.description,e.dueDate,e.priority];ce.Publish("sendingEdits",t)}}))},editTodos(e){const t=e[0],n=e[1];Pe.allProjects[t].forEach((t=>{t.title==n&&(t.project=e[2],t.title=e[3],t.description=e[4],t.dueDate=e[5],t.priority=e[7],Pe.printTodos(t.project))})),Pe.changeallProjects()},printTodos(e){ce.Publish("cleaningDOM",xe),ce.Publish("cleaningDOM",ke),console.log(Pe.allProjects[e]),console.log(Pe.allProjects),Pe.allProjects[e]&&(Pe.allProjects[e].forEach((e=>{ce.Publish("printingTodos",e)})),Pe.printProjects(ke))},printProjects(e){Object.keys(Pe.allProjects).forEach((e=>{Object.keys(Pe.allProjects[e]).length&&ce.Publish("printingProjects",e)}))},consoleTodos(e){this.allProjects[e]?this.allProjects[e].forEach((e=>{console.log(e)})):console.log("emp")},sendJSON(e){let t=["Welcome","Welcome!","To get started try selecting the default todo list provided on the left. Also + button is present on the bottom that you can use to create your own todos!","2030-01-01",!1,"Low"];ce.Publish("creatingTodos",t),ce.Publish("creatingTodos",["ToDo","Complete task","Once you've finished your first task you can click the checkbox next to the task to mark it as complete. A completed task will not be deleted unless you opt to.","2030-01-01",!1,"High"]),ce.Publish("creatingTodos",["ToDo","Editing tasks","You can also edit the todo using the edit icon next to it!","2030-01-01",!1,"Medium"]),ce.Publish("callPrintTodos",t[0])},getJSON(e){let t=JSON.parse(localStorage.getItem("allProjects"));Pe.allProjects=t,console.log(Pe.allProjects),Pe.newPopulate()},changeallProjects(e){let t=JSON.stringify(Pe.allProjects);localStorage.setItem("allProjects",t)},newPopulate(){Object.keys(Pe.allProjects).forEach((e=>{Pe.printTodos(e)}))}};ce.Subscribe("creatingProjects",Pe.createProject),ce.Subscribe("removingTodos",Pe.removeTodo),ce.Subscribe("changingStatus",Pe.changeStatus),ce.Subscribe("callPrintTodos",Pe.printTodos),ce.Subscribe("gettingDetails",Pe.getDetails),ce.Subscribe("gettingEdits",Pe.getEdits),ce.Subscribe("editingTodos",Pe.editTodos),ce.Subscribe("removingProjects",Pe.removeProject),ce.Subscribe("sendingJSON",Pe.sendJSON),ce.Subscribe("gettingJSON",Pe.getJSON),ce.Subscribe("settingLocals",Pe.changeallProjects),ce.Subscribe("creatingTodos",(function(e){const t={};t.project=e[0],t.title=e[1],t.description=e[2],t.dueDate=e[3],t.progress=e[4],t.priority=e[5];const n=[t.project,t];ce.Publish("creatingProjects",n)})),localStorage.getItem("allProjects")?ce.Publish("gettingJSON","dummy"):ce.Publish("sendingJSON","dummy")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,